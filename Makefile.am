ACLOCAL_AMFLAGS = -I m4

# Remove the tedium of keeping track whether an automake variable
# previously was assigned to, and whether = or += _must_ be used.
# Start empty, and always append.
bin_PROGRAMS =
noinst_LTLIBRARIES =
lib_LTLIBRARIES =

# Create a library which contains the drivers' code.
DRIVERS_LIBRARY = src/libdrivers.la
noinst_LTLIBRARIES += $(DRIVERS_LIBRARY)
src_libdrivers_la_SOURCES = src/driver_1.c src/driver_2.c src/drivers.c src/drivers.h

# Create a library which contains the drivers' code, as well as
# the list of included drivers, and iteration logic for the list.
DRIVERS_LDSCRIPT = $(srcdir)/src/drivers.ld
DRIVERS_LIST_LIBRARY = src/libdrivers_list.la
noinst_LTLIBRARIES += $(DRIVERS_LIST_LIBRARY)
src_libdrivers_list_la_SOURCES = src/drivers.c
src_libdrivers_list_la_LDFLAGS = $(DRIVERS_LDSCRIPT) -Wl,--whole-archive $(DRIVERS_LIBRARY) -Wl,--no-whole-archive
EXTRA_src_libdrivers_list_la_DEPENDENCIES = $(DRIVERS_LDSCRIPT) $(DRIVERS_LIBRARY)
EXTRA_DIST = $(DRIVERS_LDSCRIPT)
src_libdrivers_list_la_AR = echo HELLO _AR $(LD) -r -o
src_libdrivers_list_la_a_AR = echo HELLO _a_AR $(LD) -r -o
src_libdrivers_list_la_LIBTOOLFLAGS = --no-quiet

# TODO Extract the .a from the .la somehow? Unfortunately libtool does
# not have -print-file-name as gcc(1) does.
# TODO Is the name platform dependent, need we use $(libext) variables?
# grep(1) for '\.a' in the .la file? Still need to add the .libs/ dir.
# Lots of magic involved, but we also manually create the .lo file since
# automake won't let us create .lo targets from official .am syntax. :(
DRIVERS_A_FILENAME = src/.libs/libdrivers.a

DRVLIST_OBJECT = src/drvlist.o
DRVLIST_LTOBJECT = src/drvlist.lo

$(DRVLIST_OBJECT): $(DRIVERS_LIBRARY) $(DRIVERS_LDSCRIPT)
	$(AM_V_CCLD)$(LD) -r -o $@ --whole-archive $(DRIVERS_A_FILENAME) --no-whole-archive $(DRIVERS_LDSCRIPT)

$(DRVLIST_LTOBJECT): $(DRVLIST_OBJECT)
	$(AM_V_GEN)echo "# Generated by libtool" > $@
	$(AM_V_GEN)echo "# AUTO GENERATED, DO NOT EDIT" >> $@
	$(AM_V_GEN)echo "pic_object='`basename $^`'" >> $@
	$(AM_V_GEN)echo "non_pic_object='`basename $^`'" >> $@

COMBO_LIBRARY = src/libcombo.la
lib_LTLIBRARIES += $(COMBO_LIBRARY)
src_libcombo_la_SOURCES = src/comm.c src/comm.h
src_libcombo_la_LIBADD = $(DRVLIST_LTOBJECT)

DRVCOMM_LIBRARY = src/libdrvcomm.la
lib_LTLIBRARIES += $(DRVCOMM_LIBRARY)
src_libdrvcomm_la_SOURCES = src/drivers.c src/comm.c src/comm.h
src_libdrvcomm_la_LDFLAGS = -shared
src_libdrvcomm_la_LDFLAGS += $(DRIVERS_LDSCRIPT) -Wl,--whole-archive $(DRIVERS_LIBRARY) -Wl,--no-whole-archive
src_libdrvcomm_la_AR = echo HELLO _AR $(LINK) -r -o
src_libdrvcomm_la_LINK = $(LINK) -r
src_libdrvcomm_la_LIBTOOLFLAGS = --no-quiet

## interactive example, uses libtool without automake
## $ libtool --no-quiet --mode=link gcc -o drivers_list.o src/driver_1.lo src/driver_2.lo src/src_libdrivers_list_la-drivers.lo ../src/drivers.ld
## libtool: link: /usr/bin/ld -m elf_x86_64 -r -o drivers_list.o  src/.libs/driver_1.o src/.libs/driver_2.o src/.libs/src_libdrivers_list_la-drivers.o
## what the? runs ld(1) which is good, but ignores the specified .ld script which is essential! neither -T file nor -Wl,-T,file change this :(

# Create a library with additional support code (communication).
COMM_LIBRARY = src/libcomm.la
noinst_LTLIBRARIES += $(COMM_LIBRARY)
src_libcomm_la_SOURCES = src/comm.c src/comm.h

# Create an application which uses the iterating library.
bin_PROGRAMS += app_static
app_static_SOURCES = src/app_main.c
app_static_LDADD = $(DRIVERS_LIST_LIBRARY)
app_static_LDFLAGS = $(DRIVERS_LDSCRIPT)
app_static_LDADD += $(COMM_LIBRARY)
EXTRA_app_static_DEPENDENCIES = $(DRIVERS_LDSCRIPT)

# Create an application which uses the combined library.
bin_PROGRAMS += app_combo
app_combo_SOURCES = src/app_main.c
app_combo_LDADD = $(DRIVERS_LIST_LIBRARY) $(COMBO_LIBRARY)
